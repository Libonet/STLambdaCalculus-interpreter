{-
Ack 0 n = succ n
Ack m 0 = Ack (m-1) 1
Ack m n = Ack (m-1) (Ack m (n-1))

Ack 0 = \n . succ n = succ
Ack m = \n . R ("Ack (m-1)" 1) (\r y . "Ack (m-1)" r) n

"Ack (m-1)" = f

Ack :: Nat -> Nat -> Nat
Ack = \m . R (succ) (\f x . \n. R (f 1) (\r y . f r) n) m
-}

def Ack = \m:Nat. R (\v:Nat.suc v) (\f:Nat->Nat.\x:Nat. \n:Nat. R (f (suc 0)) (\r:Nat.\y:Nat. f r) n) m
